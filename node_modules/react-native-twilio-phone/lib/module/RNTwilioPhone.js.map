{"version":3,"sources":["RNTwilioPhone.ts"],"names":["messaging","Platform","RNCallKeep","EventType","TwilioPhone","twilioPhoneEmitter","VoipPushNotification","ramdomUuid","defaultOptions","requestPermissionsOnInit","CK_CONSTANTS","END_CALL_REASONS","FAILED","REMOTE_ENDED","UNANSWERED","ANSWERED_ELSEWHERE","DECLINED_ELSEWHERE","MISSED","RNTwilioPhone","initialize","callKeepOptions","fetchAccessToken","options","unsubscribeCallKeep","initializeCallKeep","unsubscribeRegisterAndroid","registerAndroid","unsubscribeRegisterIOS","registerIOS","OS","setup","then","setAvailable","catch","e","console","log","registerPhoneAccount","registerAndroidEvents","unsubscribeTwilioPhone","listenTwilioPhone","listenCallKeep","handleBackgroundState","setBackgroundMessageHandler","remoteMessage","data","handleMessage","startCall","to","calleeName","from","accessToken","params","uuid","toLowerCase","activeCall","sid","unregister","deviceToken","getToken","registerTwilioPhone","unsubscribeTokenRefresh","onTokenRefresh","unsubscribeMessage","onMessage","addEventListener","notification","aps","registerVoipToken","removeEventListener","removeTwilioPhoneListeners","subscriptions","addListener","CallInvite","callSid","addCall","displayIncomingCall","CancelledCallInvite","getCallUUID","reportEndCallWithUUID","removeCall","CallRinging","CallConnected","setCurrentCallActive","CallDisconnected","CallDisconnectedError","map","subscription","remove","removeCallKeepListeners","callUUID","payload","twi_call_sid","deactivateAudio","activateAudio","getCallSid","acceptCallInvite","endCall","muted","toggleMuteCall","hold","toggleHoldCall","digits","sendDigits","removeAllListeners","register","call","calls","push","index","i","length","splice"],"mappings":"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","sourcesContent":["import messaging from '@react-native-firebase/messaging';\nimport { Platform } from 'react-native';\nimport RNCallKeep, { IOptions } from 'react-native-callkeep';\nimport {\n  ConnectParams,\n  EventType,\n  TwilioPhone,\n  twilioPhoneEmitter,\n} from 'react-native-twilio-phone';\nimport VoipPushNotification from 'react-native-voip-push-notification';\nimport ramdomUuid from 'uuid-random';\n\nexport type RNTwilioPhoneOptions = {\n  requestPermissionsOnInit: boolean; // Default: true\n};\n\ntype Call = {\n  uuid: string | null;\n  sid: string | null;\n};\n\nconst defaultOptions: RNTwilioPhoneOptions = {\n  requestPermissionsOnInit: true,\n};\n\nconst CK_CONSTANTS = {\n  END_CALL_REASONS: {\n    FAILED: 1,\n    REMOTE_ENDED: 2,\n    UNANSWERED: 3,\n    ANSWERED_ELSEWHERE: 4,\n    DECLINED_ELSEWHERE: 5,\n    MISSED: 6,\n  },\n};\n\nclass RNTwilioPhone {\n  static calls: Call[] = [];\n\n  private static fetchAccessToken: () => Promise<string>;\n  private static deviceToken: string | null = null;\n  private static activeCall: Call | null = null;\n\n  static initialize(\n    callKeepOptions: IOptions,\n    fetchAccessToken: () => Promise<string>,\n    options = defaultOptions\n  ) {\n    const unsubscribeCallKeep = RNTwilioPhone.initializeCallKeep(\n      callKeepOptions,\n      fetchAccessToken,\n      options\n    );\n\n    const unsubscribeRegisterAndroid = RNTwilioPhone.registerAndroid();\n    const unsubscribeRegisterIOS = RNTwilioPhone.registerIOS();\n\n    return () => {\n      unsubscribeCallKeep();\n      unsubscribeRegisterAndroid();\n      unsubscribeRegisterIOS();\n    };\n  }\n\n  static initializeCallKeep(\n    callKeepOptions: IOptions,\n    fetchAccessToken: () => Promise<string>,\n    options = defaultOptions\n  ) {\n    const { requestPermissionsOnInit } = options;\n\n    RNTwilioPhone.fetchAccessToken = fetchAccessToken;\n\n    if (Platform.OS === 'ios' || requestPermissionsOnInit) {\n      RNCallKeep.setup(callKeepOptions)\n        .then(() => {\n          RNCallKeep.setAvailable(true);\n        })\n        .catch((e) => console.log(e));\n    } else {\n      RNCallKeep.registerPhoneAccount();\n      RNCallKeep.registerAndroidEvents();\n      RNCallKeep.setAvailable(true);\n    }\n\n    const unsubscribeTwilioPhone = RNTwilioPhone.listenTwilioPhone();\n    const unsubscribeCallKeep = RNTwilioPhone.listenCallKeep();\n\n    return () => {\n      unsubscribeTwilioPhone();\n      unsubscribeCallKeep();\n    };\n  }\n\n  static handleBackgroundState() {\n    if (Platform.OS !== 'android') {\n      return;\n    }\n\n    messaging().setBackgroundMessageHandler(async (remoteMessage) => {\n      if (!remoteMessage.data) {\n        return;\n      }\n\n      RNCallKeep.registerPhoneAccount();\n      RNCallKeep.registerAndroidEvents();\n      RNCallKeep.setAvailable(true);\n\n      RNTwilioPhone.listenTwilioPhone();\n      RNTwilioPhone.listenCallKeep();\n\n      TwilioPhone.handleMessage(remoteMessage.data);\n    });\n  }\n\n  static async startCall(to: string, calleeName?: string, from?: string) {\n    const accessToken = await RNTwilioPhone.fetchAccessToken();\n    const params: ConnectParams = { to };\n\n    if (from) {\n      params.from = from;\n    }\n\n    TwilioPhone.startCall(accessToken, params);\n\n    const uuid = ramdomUuid().toLowerCase();\n    RNTwilioPhone.activeCall = { uuid: null, sid: null };\n\n    RNCallKeep.startCall(uuid, to, calleeName, 'generic');\n  }\n\n  static async unregister() {\n    if (!RNTwilioPhone.deviceToken) {\n      return;\n    }\n\n    const accessToken = await RNTwilioPhone.fetchAccessToken();\n    TwilioPhone.unregister(accessToken, RNTwilioPhone.deviceToken);\n  }\n\n  private static registerAndroid() {\n    if (Platform.OS !== 'android') {\n      return () => {};\n    }\n\n    messaging()\n      .getToken()\n      .then(RNTwilioPhone.registerTwilioPhone)\n      .catch((e) => console.log(e));\n\n    // Listen to whether the token changes\n    const unsubscribeTokenRefresh = messaging().onTokenRefresh(\n      RNTwilioPhone.registerTwilioPhone\n    );\n\n    const unsubscribeMessage = messaging().onMessage((remoteMessage) => {\n      if (remoteMessage.data) {\n        TwilioPhone.handleMessage(remoteMessage.data);\n      }\n    });\n\n    return () => {\n      unsubscribeTokenRefresh();\n      unsubscribeMessage();\n    };\n  }\n\n  private static registerIOS() {\n    if (Platform.OS !== 'ios') {\n      return () => {};\n    }\n\n    VoipPushNotification.addEventListener(\n      'register',\n      RNTwilioPhone.registerTwilioPhone\n    );\n\n    VoipPushNotification.addEventListener(\n      'notification',\n      (notification: any) => {\n        delete notification.aps;\n        TwilioPhone.handleMessage(notification);\n      }\n    );\n\n    VoipPushNotification.registerVoipToken();\n\n    return () => {\n      VoipPushNotification.removeEventListener('register');\n      VoipPushNotification.removeEventListener('notification');\n    };\n  }\n\n  private static listenTwilioPhone() {\n    RNTwilioPhone.removeTwilioPhoneListeners();\n\n    const subscriptions = [\n      twilioPhoneEmitter.addListener(\n        EventType.CallInvite,\n        ({ callSid, from }) => {\n          // Incoming call is already reported to CallKit on iOS\n          if (Platform.OS === 'android') {\n            const uuid = ramdomUuid().toLowerCase();\n            RNTwilioPhone.addCall({ uuid, sid: callSid });\n\n            RNCallKeep.displayIncomingCall(uuid, from);\n          }\n        }\n      ),\n      twilioPhoneEmitter.addListener(\n        EventType.CancelledCallInvite,\n        ({ callSid }) => {\n          const uuid = RNTwilioPhone.getCallUUID(callSid);\n\n          if (uuid) {\n            RNCallKeep.reportEndCallWithUUID(\n              uuid,\n              CK_CONSTANTS.END_CALL_REASONS.MISSED\n            );\n\n            RNTwilioPhone.removeCall(uuid);\n          }\n        }\n      ),\n      twilioPhoneEmitter.addListener(EventType.CallRinging, ({ callSid }) => {\n        if (RNTwilioPhone.activeCall) {\n          RNTwilioPhone.activeCall.sid = callSid;\n\n          if (RNTwilioPhone.activeCall.uuid) {\n            RNTwilioPhone.addCall(RNTwilioPhone.activeCall);\n            RNTwilioPhone.activeCall = null;\n          }\n        }\n      }),\n      twilioPhoneEmitter.addListener(EventType.CallConnected, ({ callSid }) => {\n        const uuid = RNTwilioPhone.getCallUUID(callSid);\n\n        uuid && RNCallKeep.setCurrentCallActive(uuid);\n      }),\n      twilioPhoneEmitter.addListener(\n        EventType.CallDisconnected,\n        ({ callSid }) => {\n          const uuid = RNTwilioPhone.getCallUUID(callSid);\n\n          if (uuid) {\n            RNCallKeep.reportEndCallWithUUID(\n              uuid,\n              CK_CONSTANTS.END_CALL_REASONS.REMOTE_ENDED\n            );\n\n            RNTwilioPhone.removeCall(uuid);\n          }\n        }\n      ),\n      twilioPhoneEmitter.addListener(\n        EventType.CallDisconnectedError,\n        ({ callSid }) => {\n          const uuid = RNTwilioPhone.getCallUUID(callSid);\n\n          if (uuid) {\n            RNCallKeep.reportEndCallWithUUID(\n              uuid,\n              CK_CONSTANTS.END_CALL_REASONS.FAILED\n            );\n\n            RNTwilioPhone.removeCall(uuid);\n          }\n        }\n      ),\n    ];\n\n    return () => {\n      subscriptions.map((subscription) => {\n        subscription.remove();\n      });\n    };\n  }\n\n  private static listenCallKeep() {\n    RNTwilioPhone.removeCallKeepListeners();\n\n    if (Platform.OS === 'ios') {\n      RNCallKeep.addEventListener(\n        'didDisplayIncomingCall',\n        ({ callUUID, payload }) => {\n          RNTwilioPhone.addCall({ uuid: callUUID, sid: payload.twi_call_sid });\n        }\n      );\n\n      RNCallKeep.addEventListener('didResetProvider', () => {\n        TwilioPhone.deactivateAudio();\n      });\n\n      RNCallKeep.addEventListener('didActivateAudioSession', () => {\n        TwilioPhone.activateAudio();\n      });\n\n      RNCallKeep.addEventListener('didDeactivateAudioSession', () => {\n        TwilioPhone.deactivateAudio();\n      });\n    }\n\n    RNCallKeep.addEventListener('didReceiveStartCallAction', ({ callUUID }) => {\n      if (RNTwilioPhone.activeCall) {\n        RNTwilioPhone.activeCall.uuid = callUUID;\n\n        if (RNTwilioPhone.activeCall.sid) {\n          RNTwilioPhone.addCall(RNTwilioPhone.activeCall);\n          RNTwilioPhone.activeCall = null;\n        }\n      }\n    });\n\n    RNCallKeep.addEventListener('answerCall', ({ callUUID }) => {\n      const sid = RNTwilioPhone.getCallSid(callUUID);\n\n      sid && TwilioPhone.acceptCallInvite(sid);\n    });\n\n    RNCallKeep.addEventListener('endCall', ({ callUUID }) => {\n      const sid = RNTwilioPhone.getCallSid(callUUID);\n\n      sid && TwilioPhone.endCall(sid);\n\n      RNTwilioPhone.removeCall(callUUID);\n    });\n\n    RNCallKeep.addEventListener(\n      'didPerformSetMutedCallAction',\n      ({ callUUID, muted }) => {\n        const sid = RNTwilioPhone.getCallSid(callUUID);\n\n        sid && TwilioPhone.toggleMuteCall(sid, muted);\n      }\n    );\n\n    RNCallKeep.addEventListener(\n      'didToggleHoldCallAction',\n      ({ callUUID, hold }) => {\n        const sid = RNTwilioPhone.getCallSid(callUUID);\n\n        sid && TwilioPhone.toggleHoldCall(sid, hold);\n      }\n    );\n\n    RNCallKeep.addEventListener(\n      'didPerformDTMFAction',\n      ({ callUUID, digits }) => {\n        const sid = RNTwilioPhone.getCallSid(callUUID);\n\n        sid && TwilioPhone.sendDigits(sid, digits);\n      }\n    );\n\n    return () => {\n      RNTwilioPhone.removeCallKeepListeners();\n    };\n  }\n\n  private static removeTwilioPhoneListeners() {\n    twilioPhoneEmitter.removeAllListeners(EventType.CallInvite);\n    twilioPhoneEmitter.removeAllListeners(EventType.CancelledCallInvite);\n    twilioPhoneEmitter.removeAllListeners(EventType.CallRinging);\n    twilioPhoneEmitter.removeAllListeners(EventType.CallConnected);\n    twilioPhoneEmitter.removeAllListeners(EventType.CallDisconnected);\n    twilioPhoneEmitter.removeAllListeners(EventType.CallDisconnectedError);\n  }\n\n  private static removeCallKeepListeners() {\n    if (Platform.OS === 'ios') {\n      RNCallKeep.removeEventListener('didDisplayIncomingCall');\n      RNCallKeep.removeEventListener('didResetProvider');\n      RNCallKeep.removeEventListener('didActivateAudioSession');\n      RNCallKeep.removeEventListener('didDeactivateAudioSession');\n    }\n\n    RNCallKeep.removeEventListener('didReceiveStartCallAction');\n    RNCallKeep.removeEventListener('answerCall');\n    RNCallKeep.removeEventListener('endCall');\n    RNCallKeep.removeEventListener('didPerformSetMutedCallAction');\n    RNCallKeep.removeEventListener('didToggleHoldCallAction');\n    RNCallKeep.removeEventListener('didPerformDTMFAction');\n  }\n\n  private static async registerTwilioPhone(deviceToken: string) {\n    try {\n      const accessToken = await RNTwilioPhone.fetchAccessToken();\n\n      TwilioPhone.register(accessToken, deviceToken);\n      RNTwilioPhone.deviceToken = deviceToken;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  private static addCall(call: Call) {\n    RNTwilioPhone.calls.push(call);\n  }\n\n  private static removeCall(uuid: string) {\n    let index = -1;\n\n    for (let i = 0; i < RNTwilioPhone.calls.length; i++) {\n      if (RNTwilioPhone.calls[i].uuid === uuid) {\n        index = i;\n        break;\n      }\n    }\n\n    if (index > -1) {\n      RNTwilioPhone.calls.splice(index, 1);\n    }\n  }\n\n  private static getCallUUID(sid: string) {\n    for (const call of RNTwilioPhone.calls) {\n      if (call.sid === sid) {\n        return call.uuid;\n      }\n    }\n\n    return null;\n  }\n\n  private static getCallSid(uuid: string) {\n    for (const call of RNTwilioPhone.calls) {\n      if (call.uuid === uuid) {\n        return call.sid;\n      }\n    }\n\n    return null;\n  }\n}\n\nexport { RNTwilioPhone };\n"]}