"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RNTwilioPhone = void 0;

var _messaging = _interopRequireDefault(require("@react-native-firebase/messaging"));

var _reactNative = require("react-native");

var _reactNativeCallkeep = _interopRequireDefault(require("react-native-callkeep"));

var _reactNativeTwilioPhone = require("react-native-twilio-phone");

var _reactNativeVoipPushNotification = _interopRequireDefault(require("react-native-voip-push-notification"));

var _uuidRandom = _interopRequireDefault(require("uuid-random"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const defaultOptions = {
  requestPermissionsOnInit: true
};
const CK_CONSTANTS = {
  END_CALL_REASONS: {
    FAILED: 1,
    REMOTE_ENDED: 2,
    UNANSWERED: 3,
    ANSWERED_ELSEWHERE: 4,
    DECLINED_ELSEWHERE: 5,
    MISSED: 6
  }
};

class RNTwilioPhone {
  static initialize(callKeepOptions, fetchAccessToken, options = defaultOptions) {
    const unsubscribeCallKeep = RNTwilioPhone.initializeCallKeep(callKeepOptions, fetchAccessToken, options);
    const unsubscribeRegisterAndroid = RNTwilioPhone.registerAndroid();
    const unsubscribeRegisterIOS = RNTwilioPhone.registerIOS();
    return () => {
      unsubscribeCallKeep();
      unsubscribeRegisterAndroid();
      unsubscribeRegisterIOS();
    };
  }

  static initializeCallKeep(callKeepOptions, fetchAccessToken, options = defaultOptions) {
    const {
      requestPermissionsOnInit
    } = options;
    RNTwilioPhone.fetchAccessToken = fetchAccessToken;

    if (_reactNative.Platform.OS === 'ios' || requestPermissionsOnInit) {
      _reactNativeCallkeep.default.setup(callKeepOptions).then(() => {
        _reactNativeCallkeep.default.setAvailable(true);
      }).catch(e => console.log(e));
    } else {
      _reactNativeCallkeep.default.registerPhoneAccount();

      _reactNativeCallkeep.default.registerAndroidEvents();

      _reactNativeCallkeep.default.setAvailable(true);
    }

    const unsubscribeTwilioPhone = RNTwilioPhone.listenTwilioPhone();
    const unsubscribeCallKeep = RNTwilioPhone.listenCallKeep();
    return () => {
      unsubscribeTwilioPhone();
      unsubscribeCallKeep();
    };
  }

  static handleBackgroundState() {
    if (_reactNative.Platform.OS !== 'android') {
      return;
    }

    (0, _messaging.default)().setBackgroundMessageHandler(async remoteMessage => {
      if (!remoteMessage.data) {
        return;
      }

      _reactNativeCallkeep.default.registerPhoneAccount();

      _reactNativeCallkeep.default.registerAndroidEvents();

      _reactNativeCallkeep.default.setAvailable(true);

      RNTwilioPhone.listenTwilioPhone();
      RNTwilioPhone.listenCallKeep();

      _reactNativeTwilioPhone.TwilioPhone.handleMessage(remoteMessage.data);
    });
  }

  static async startCall(to, calleeName, from) {
    const accessToken = await RNTwilioPhone.fetchAccessToken();
    const params = {
      to
    };

    if (from) {
      params.from = from;
    }

    _reactNativeTwilioPhone.TwilioPhone.startCall(accessToken, params);

    const uuid = (0, _uuidRandom.default)().toLowerCase();
    RNTwilioPhone.activeCall = {
      uuid: null,
      sid: null
    };

    _reactNativeCallkeep.default.startCall(uuid, to, calleeName, 'generic');
  }

  static async unregister() {
    if (!RNTwilioPhone.deviceToken) {
      return;
    }

    const accessToken = await RNTwilioPhone.fetchAccessToken();

    _reactNativeTwilioPhone.TwilioPhone.unregister(accessToken, RNTwilioPhone.deviceToken);
  }

  static registerAndroid() {
    if (_reactNative.Platform.OS !== 'android') {
      return () => {};
    }

    (0, _messaging.default)().getToken().then(RNTwilioPhone.registerTwilioPhone).catch(e => console.log(e)); // Listen to whether the token changes

    const unsubscribeTokenRefresh = (0, _messaging.default)().onTokenRefresh(RNTwilioPhone.registerTwilioPhone);
    const unsubscribeMessage = (0, _messaging.default)().onMessage(remoteMessage => {
      if (remoteMessage.data) {
        _reactNativeTwilioPhone.TwilioPhone.handleMessage(remoteMessage.data);
      }
    });
    return () => {
      unsubscribeTokenRefresh();
      unsubscribeMessage();
    };
  }

  static registerIOS() {
    if (_reactNative.Platform.OS !== 'ios') {
      return () => {};
    }

    _reactNativeVoipPushNotification.default.addEventListener('register', RNTwilioPhone.registerTwilioPhone);

    _reactNativeVoipPushNotification.default.addEventListener('notification', notification => {
      delete notification.aps;

      _reactNativeTwilioPhone.TwilioPhone.handleMessage(notification);
    });

    _reactNativeVoipPushNotification.default.registerVoipToken();

    return () => {
      _reactNativeVoipPushNotification.default.removeEventListener('register');

      _reactNativeVoipPushNotification.default.removeEventListener('notification');
    };
  }

  static listenTwilioPhone() {
    RNTwilioPhone.removeTwilioPhoneListeners();
    const subscriptions = [_reactNativeTwilioPhone.twilioPhoneEmitter.addListener(_reactNativeTwilioPhone.EventType.CallInvite, ({
      callSid,
      from
    }) => {
      // Incoming call is already reported to CallKit on iOS
      if (_reactNative.Platform.OS === 'android') {
        const uuid = (0, _uuidRandom.default)().toLowerCase();
        RNTwilioPhone.addCall({
          uuid,
          sid: callSid
        });

        _reactNativeCallkeep.default.displayIncomingCall(uuid, from);
      }
    }), _reactNativeTwilioPhone.twilioPhoneEmitter.addListener(_reactNativeTwilioPhone.EventType.CancelledCallInvite, ({
      callSid
    }) => {
      const uuid = RNTwilioPhone.getCallUUID(callSid);

      if (uuid) {
        _reactNativeCallkeep.default.reportEndCallWithUUID(uuid, CK_CONSTANTS.END_CALL_REASONS.MISSED);

        RNTwilioPhone.removeCall(uuid);
      }
    }), _reactNativeTwilioPhone.twilioPhoneEmitter.addListener(_reactNativeTwilioPhone.EventType.CallRinging, ({
      callSid
    }) => {
      if (RNTwilioPhone.activeCall) {
        RNTwilioPhone.activeCall.sid = callSid;

        if (RNTwilioPhone.activeCall.uuid) {
          RNTwilioPhone.addCall(RNTwilioPhone.activeCall);
          RNTwilioPhone.activeCall = null;
        }
      }
    }), _reactNativeTwilioPhone.twilioPhoneEmitter.addListener(_reactNativeTwilioPhone.EventType.CallConnected, ({
      callSid
    }) => {
      const uuid = RNTwilioPhone.getCallUUID(callSid);
      uuid && _reactNativeCallkeep.default.setCurrentCallActive(uuid);
    }), _reactNativeTwilioPhone.twilioPhoneEmitter.addListener(_reactNativeTwilioPhone.EventType.CallDisconnected, ({
      callSid
    }) => {
      const uuid = RNTwilioPhone.getCallUUID(callSid);

      if (uuid) {
        _reactNativeCallkeep.default.reportEndCallWithUUID(uuid, CK_CONSTANTS.END_CALL_REASONS.REMOTE_ENDED);

        RNTwilioPhone.removeCall(uuid);
      }
    }), _reactNativeTwilioPhone.twilioPhoneEmitter.addListener(_reactNativeTwilioPhone.EventType.CallDisconnectedError, ({
      callSid
    }) => {
      const uuid = RNTwilioPhone.getCallUUID(callSid);

      if (uuid) {
        _reactNativeCallkeep.default.reportEndCallWithUUID(uuid, CK_CONSTANTS.END_CALL_REASONS.FAILED);

        RNTwilioPhone.removeCall(uuid);
      }
    })];
    return () => {
      subscriptions.map(subscription => {
        subscription.remove();
      });
    };
  }

  static listenCallKeep() {
    RNTwilioPhone.removeCallKeepListeners();

    if (_reactNative.Platform.OS === 'ios') {
      _reactNativeCallkeep.default.addEventListener('didDisplayIncomingCall', ({
        callUUID,
        payload
      }) => {
        RNTwilioPhone.addCall({
          uuid: callUUID,
          sid: payload.twi_call_sid
        });
      });

      _reactNativeCallkeep.default.addEventListener('didResetProvider', () => {
        _reactNativeTwilioPhone.TwilioPhone.deactivateAudio();
      });

      _reactNativeCallkeep.default.addEventListener('didActivateAudioSession', () => {
        _reactNativeTwilioPhone.TwilioPhone.activateAudio();
      });

      _reactNativeCallkeep.default.addEventListener('didDeactivateAudioSession', () => {
        _reactNativeTwilioPhone.TwilioPhone.deactivateAudio();
      });
    }

    _reactNativeCallkeep.default.addEventListener('didReceiveStartCallAction', ({
      callUUID
    }) => {
      if (RNTwilioPhone.activeCall) {
        RNTwilioPhone.activeCall.uuid = callUUID;

        if (RNTwilioPhone.activeCall.sid) {
          RNTwilioPhone.addCall(RNTwilioPhone.activeCall);
          RNTwilioPhone.activeCall = null;
        }
      }
    });

    _reactNativeCallkeep.default.addEventListener('answerCall', ({
      callUUID
    }) => {
      const sid = RNTwilioPhone.getCallSid(callUUID);
      sid && _reactNativeTwilioPhone.TwilioPhone.acceptCallInvite(sid);
    });

    _reactNativeCallkeep.default.addEventListener('endCall', ({
      callUUID
    }) => {
      const sid = RNTwilioPhone.getCallSid(callUUID);
      sid && _reactNativeTwilioPhone.TwilioPhone.endCall(sid);
      RNTwilioPhone.removeCall(callUUID);
    });

    _reactNativeCallkeep.default.addEventListener('didPerformSetMutedCallAction', ({
      callUUID,
      muted
    }) => {
      const sid = RNTwilioPhone.getCallSid(callUUID);
      sid && _reactNativeTwilioPhone.TwilioPhone.toggleMuteCall(sid, muted);
    });

    _reactNativeCallkeep.default.addEventListener('didToggleHoldCallAction', ({
      callUUID,
      hold
    }) => {
      const sid = RNTwilioPhone.getCallSid(callUUID);
      sid && _reactNativeTwilioPhone.TwilioPhone.toggleHoldCall(sid, hold);
    });

    _reactNativeCallkeep.default.addEventListener('didPerformDTMFAction', ({
      callUUID,
      digits
    }) => {
      const sid = RNTwilioPhone.getCallSid(callUUID);
      sid && _reactNativeTwilioPhone.TwilioPhone.sendDigits(sid, digits);
    });

    return () => {
      RNTwilioPhone.removeCallKeepListeners();
    };
  }

  static removeTwilioPhoneListeners() {
    _reactNativeTwilioPhone.twilioPhoneEmitter.removeAllListeners(_reactNativeTwilioPhone.EventType.CallInvite);

    _reactNativeTwilioPhone.twilioPhoneEmitter.removeAllListeners(_reactNativeTwilioPhone.EventType.CancelledCallInvite);

    _reactNativeTwilioPhone.twilioPhoneEmitter.removeAllListeners(_reactNativeTwilioPhone.EventType.CallRinging);

    _reactNativeTwilioPhone.twilioPhoneEmitter.removeAllListeners(_reactNativeTwilioPhone.EventType.CallConnected);

    _reactNativeTwilioPhone.twilioPhoneEmitter.removeAllListeners(_reactNativeTwilioPhone.EventType.CallDisconnected);

    _reactNativeTwilioPhone.twilioPhoneEmitter.removeAllListeners(_reactNativeTwilioPhone.EventType.CallDisconnectedError);
  }

  static removeCallKeepListeners() {
    if (_reactNative.Platform.OS === 'ios') {
      _reactNativeCallkeep.default.removeEventListener('didDisplayIncomingCall');

      _reactNativeCallkeep.default.removeEventListener('didResetProvider');

      _reactNativeCallkeep.default.removeEventListener('didActivateAudioSession');

      _reactNativeCallkeep.default.removeEventListener('didDeactivateAudioSession');
    }

    _reactNativeCallkeep.default.removeEventListener('didReceiveStartCallAction');

    _reactNativeCallkeep.default.removeEventListener('answerCall');

    _reactNativeCallkeep.default.removeEventListener('endCall');

    _reactNativeCallkeep.default.removeEventListener('didPerformSetMutedCallAction');

    _reactNativeCallkeep.default.removeEventListener('didToggleHoldCallAction');

    _reactNativeCallkeep.default.removeEventListener('didPerformDTMFAction');
  }

  static async registerTwilioPhone(deviceToken) {
    try {
      const accessToken = await RNTwilioPhone.fetchAccessToken();

      _reactNativeTwilioPhone.TwilioPhone.register(accessToken, deviceToken);

      RNTwilioPhone.deviceToken = deviceToken;
    } catch (e) {
      console.log(e);
    }
  }

  static addCall(call) {
    RNTwilioPhone.calls.push(call);
  }

  static removeCall(uuid) {
    let index = -1;

    for (let i = 0; i < RNTwilioPhone.calls.length; i++) {
      if (RNTwilioPhone.calls[i].uuid === uuid) {
        index = i;
        break;
      }
    }

    if (index > -1) {
      RNTwilioPhone.calls.splice(index, 1);
    }
  }

  static getCallUUID(sid) {
    for (const call of RNTwilioPhone.calls) {
      if (call.sid === sid) {
        return call.uuid;
      }
    }

    return null;
  }

  static getCallSid(uuid) {
    for (const call of RNTwilioPhone.calls) {
      if (call.uuid === uuid) {
        return call.sid;
      }
    }

    return null;
  }

}

exports.RNTwilioPhone = RNTwilioPhone;

_defineProperty(RNTwilioPhone, "calls", []);

_defineProperty(RNTwilioPhone, "fetchAccessToken", void 0);

_defineProperty(RNTwilioPhone, "deviceToken", null);

_defineProperty(RNTwilioPhone, "activeCall", null);
//# sourceMappingURL=RNTwilioPhone.js.map