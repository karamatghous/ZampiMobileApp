{"version":3,"sources":["RNTwilioPhone.ts"],"names":["defaultOptions","requestPermissionsOnInit","CK_CONSTANTS","END_CALL_REASONS","FAILED","REMOTE_ENDED","UNANSWERED","ANSWERED_ELSEWHERE","DECLINED_ELSEWHERE","MISSED","RNTwilioPhone","initialize","callKeepOptions","fetchAccessToken","options","unsubscribeCallKeep","initializeCallKeep","unsubscribeRegisterAndroid","registerAndroid","unsubscribeRegisterIOS","registerIOS","Platform","OS","RNCallKeep","setup","then","setAvailable","catch","e","console","log","registerPhoneAccount","registerAndroidEvents","unsubscribeTwilioPhone","listenTwilioPhone","listenCallKeep","handleBackgroundState","setBackgroundMessageHandler","remoteMessage","data","TwilioPhone","handleMessage","startCall","to","calleeName","from","accessToken","params","uuid","toLowerCase","activeCall","sid","unregister","deviceToken","getToken","registerTwilioPhone","unsubscribeTokenRefresh","onTokenRefresh","unsubscribeMessage","onMessage","VoipPushNotification","addEventListener","notification","aps","registerVoipToken","removeEventListener","removeTwilioPhoneListeners","subscriptions","twilioPhoneEmitter","addListener","EventType","CallInvite","callSid","addCall","displayIncomingCall","CancelledCallInvite","getCallUUID","reportEndCallWithUUID","removeCall","CallRinging","CallConnected","setCurrentCallActive","CallDisconnected","CallDisconnectedError","map","subscription","remove","removeCallKeepListeners","callUUID","payload","twi_call_sid","deactivateAudio","activateAudio","getCallSid","acceptCallInvite","endCall","muted","toggleMuteCall","hold","toggleHoldCall","digits","sendDigits","removeAllListeners","register","call","calls","push","index","i","length","splice"],"mappings":"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","sourcesContent":["import messaging from '@react-native-firebase/messaging';\nimport { Platform } from 'react-native';\nimport RNCallKeep, { IOptions } from 'react-native-callkeep';\nimport {\n  ConnectParams,\n  EventType,\n  TwilioPhone,\n  twilioPhoneEmitter,\n} from 'react-native-twilio-phone';\nimport VoipPushNotification from 'react-native-voip-push-notification';\nimport ramdomUuid from 'uuid-random';\n\nexport type RNTwilioPhoneOptions = {\n  requestPermissionsOnInit: boolean; // Default: true\n};\n\ntype Call = {\n  uuid: string | null;\n  sid: string | null;\n};\n\nconst defaultOptions: RNTwilioPhoneOptions = {\n  requestPermissionsOnInit: true,\n};\n\nconst CK_CONSTANTS = {\n  END_CALL_REASONS: {\n    FAILED: 1,\n    REMOTE_ENDED: 2,\n    UNANSWERED: 3,\n    ANSWERED_ELSEWHERE: 4,\n    DECLINED_ELSEWHERE: 5,\n    MISSED: 6,\n  },\n};\n\nclass RNTwilioPhone {\n  static calls: Call[] = [];\n\n  private static fetchAccessToken: () => Promise<string>;\n  private static deviceToken: string | null = null;\n  private static activeCall: Call | null = null;\n\n  static initialize(\n    callKeepOptions: IOptions,\n    fetchAccessToken: () => Promise<string>,\n    options = defaultOptions\n  ) {\n    const unsubscribeCallKeep = RNTwilioPhone.initializeCallKeep(\n      callKeepOptions,\n      fetchAccessToken,\n      options\n    );\n\n    const unsubscribeRegisterAndroid = RNTwilioPhone.registerAndroid();\n    const unsubscribeRegisterIOS = RNTwilioPhone.registerIOS();\n\n    return () => {\n      unsubscribeCallKeep();\n      unsubscribeRegisterAndroid();\n      unsubscribeRegisterIOS();\n    };\n  }\n\n  static initializeCallKeep(\n    callKeepOptions: IOptions,\n    fetchAccessToken: () => Promise<string>,\n    options = defaultOptions\n  ) {\n    const { requestPermissionsOnInit } = options;\n\n    RNTwilioPhone.fetchAccessToken = fetchAccessToken;\n\n    if (Platform.OS === 'ios' || requestPermissionsOnInit) {\n      RNCallKeep.setup(callKeepOptions)\n        .then(() => {\n          RNCallKeep.setAvailable(true);\n        })\n        .catch((e) => console.log(e));\n    } else {\n      RNCallKeep.registerPhoneAccount();\n      RNCallKeep.registerAndroidEvents();\n      RNCallKeep.setAvailable(true);\n    }\n\n    const unsubscribeTwilioPhone = RNTwilioPhone.listenTwilioPhone();\n    const unsubscribeCallKeep = RNTwilioPhone.listenCallKeep();\n\n    return () => {\n      unsubscribeTwilioPhone();\n      unsubscribeCallKeep();\n    };\n  }\n\n  static handleBackgroundState() {\n    if (Platform.OS !== 'android') {\n      return;\n    }\n\n    messaging().setBackgroundMessageHandler(async (remoteMessage) => {\n      if (!remoteMessage.data) {\n        return;\n      }\n\n      RNCallKeep.registerPhoneAccount();\n      RNCallKeep.registerAndroidEvents();\n      RNCallKeep.setAvailable(true);\n\n      RNTwilioPhone.listenTwilioPhone();\n      RNTwilioPhone.listenCallKeep();\n\n      TwilioPhone.handleMessage(remoteMessage.data);\n    });\n  }\n\n  static async startCall(to: string, calleeName?: string, from?: string) {\n    const accessToken = await RNTwilioPhone.fetchAccessToken();\n    const params: ConnectParams = { to };\n\n    if (from) {\n      params.from = from;\n    }\n\n    TwilioPhone.startCall(accessToken, params);\n\n    const uuid = ramdomUuid().toLowerCase();\n    RNTwilioPhone.activeCall = { uuid: null, sid: null };\n\n    RNCallKeep.startCall(uuid, to, calleeName, 'generic');\n  }\n\n  static async unregister() {\n    if (!RNTwilioPhone.deviceToken) {\n      return;\n    }\n\n    const accessToken = await RNTwilioPhone.fetchAccessToken();\n    TwilioPhone.unregister(accessToken, RNTwilioPhone.deviceToken);\n  }\n\n  private static registerAndroid() {\n    if (Platform.OS !== 'android') {\n      return () => {};\n    }\n\n    messaging()\n      .getToken()\n      .then(RNTwilioPhone.registerTwilioPhone)\n      .catch((e) => console.log(e));\n\n    // Listen to whether the token changes\n    const unsubscribeTokenRefresh = messaging().onTokenRefresh(\n      RNTwilioPhone.registerTwilioPhone\n    );\n\n    const unsubscribeMessage = messaging().onMessage((remoteMessage) => {\n      if (remoteMessage.data) {\n        TwilioPhone.handleMessage(remoteMessage.data);\n      }\n    });\n\n    return () => {\n      unsubscribeTokenRefresh();\n      unsubscribeMessage();\n    };\n  }\n\n  private static registerIOS() {\n    if (Platform.OS !== 'ios') {\n      return () => {};\n    }\n\n    VoipPushNotification.addEventListener(\n      'register',\n      RNTwilioPhone.registerTwilioPhone\n    );\n\n    VoipPushNotification.addEventListener(\n      'notification',\n      (notification: any) => {\n        delete notification.aps;\n        TwilioPhone.handleMessage(notification);\n      }\n    );\n\n    VoipPushNotification.registerVoipToken();\n\n    return () => {\n      VoipPushNotification.removeEventListener('register');\n      VoipPushNotification.removeEventListener('notification');\n    };\n  }\n\n  private static listenTwilioPhone() {\n    RNTwilioPhone.removeTwilioPhoneListeners();\n\n    const subscriptions = [\n      twilioPhoneEmitter.addListener(\n        EventType.CallInvite,\n        ({ callSid, from }) => {\n          // Incoming call is already reported to CallKit on iOS\n          if (Platform.OS === 'android') {\n            const uuid = ramdomUuid().toLowerCase();\n            RNTwilioPhone.addCall({ uuid, sid: callSid });\n\n            RNCallKeep.displayIncomingCall(uuid, from);\n          }\n        }\n      ),\n      twilioPhoneEmitter.addListener(\n        EventType.CancelledCallInvite,\n        ({ callSid }) => {\n          const uuid = RNTwilioPhone.getCallUUID(callSid);\n\n          if (uuid) {\n            RNCallKeep.reportEndCallWithUUID(\n              uuid,\n              CK_CONSTANTS.END_CALL_REASONS.MISSED\n            );\n\n            RNTwilioPhone.removeCall(uuid);\n          }\n        }\n      ),\n      twilioPhoneEmitter.addListener(EventType.CallRinging, ({ callSid }) => {\n        if (RNTwilioPhone.activeCall) {\n          RNTwilioPhone.activeCall.sid = callSid;\n\n          if (RNTwilioPhone.activeCall.uuid) {\n            RNTwilioPhone.addCall(RNTwilioPhone.activeCall);\n            RNTwilioPhone.activeCall = null;\n          }\n        }\n      }),\n      twilioPhoneEmitter.addListener(EventType.CallConnected, ({ callSid }) => {\n        const uuid = RNTwilioPhone.getCallUUID(callSid);\n\n        uuid && RNCallKeep.setCurrentCallActive(uuid);\n      }),\n      twilioPhoneEmitter.addListener(\n        EventType.CallDisconnected,\n        ({ callSid }) => {\n          const uuid = RNTwilioPhone.getCallUUID(callSid);\n\n          if (uuid) {\n            RNCallKeep.reportEndCallWithUUID(\n              uuid,\n              CK_CONSTANTS.END_CALL_REASONS.REMOTE_ENDED\n            );\n\n            RNTwilioPhone.removeCall(uuid);\n          }\n        }\n      ),\n      twilioPhoneEmitter.addListener(\n        EventType.CallDisconnectedError,\n        ({ callSid }) => {\n          const uuid = RNTwilioPhone.getCallUUID(callSid);\n\n          if (uuid) {\n            RNCallKeep.reportEndCallWithUUID(\n              uuid,\n              CK_CONSTANTS.END_CALL_REASONS.FAILED\n            );\n\n            RNTwilioPhone.removeCall(uuid);\n          }\n        }\n      ),\n    ];\n\n    return () => {\n      subscriptions.map((subscription) => {\n        subscription.remove();\n      });\n    };\n  }\n\n  private static listenCallKeep() {\n    RNTwilioPhone.removeCallKeepListeners();\n\n    if (Platform.OS === 'ios') {\n      RNCallKeep.addEventListener(\n        'didDisplayIncomingCall',\n        ({ callUUID, payload }) => {\n          RNTwilioPhone.addCall({ uuid: callUUID, sid: payload.twi_call_sid });\n        }\n      );\n\n      RNCallKeep.addEventListener('didResetProvider', () => {\n        TwilioPhone.deactivateAudio();\n      });\n\n      RNCallKeep.addEventListener('didActivateAudioSession', () => {\n        TwilioPhone.activateAudio();\n      });\n\n      RNCallKeep.addEventListener('didDeactivateAudioSession', () => {\n        TwilioPhone.deactivateAudio();\n      });\n    }\n\n    RNCallKeep.addEventListener('didReceiveStartCallAction', ({ callUUID }) => {\n      if (RNTwilioPhone.activeCall) {\n        RNTwilioPhone.activeCall.uuid = callUUID;\n\n        if (RNTwilioPhone.activeCall.sid) {\n          RNTwilioPhone.addCall(RNTwilioPhone.activeCall);\n          RNTwilioPhone.activeCall = null;\n        }\n      }\n    });\n\n    RNCallKeep.addEventListener('answerCall', ({ callUUID }) => {\n      const sid = RNTwilioPhone.getCallSid(callUUID);\n\n      sid && TwilioPhone.acceptCallInvite(sid);\n    });\n\n    RNCallKeep.addEventListener('endCall', ({ callUUID }) => {\n      const sid = RNTwilioPhone.getCallSid(callUUID);\n\n      sid && TwilioPhone.endCall(sid);\n\n      RNTwilioPhone.removeCall(callUUID);\n    });\n\n    RNCallKeep.addEventListener(\n      'didPerformSetMutedCallAction',\n      ({ callUUID, muted }) => {\n        const sid = RNTwilioPhone.getCallSid(callUUID);\n\n        sid && TwilioPhone.toggleMuteCall(sid, muted);\n      }\n    );\n\n    RNCallKeep.addEventListener(\n      'didToggleHoldCallAction',\n      ({ callUUID, hold }) => {\n        const sid = RNTwilioPhone.getCallSid(callUUID);\n\n        sid && TwilioPhone.toggleHoldCall(sid, hold);\n      }\n    );\n\n    RNCallKeep.addEventListener(\n      'didPerformDTMFAction',\n      ({ callUUID, digits }) => {\n        const sid = RNTwilioPhone.getCallSid(callUUID);\n\n        sid && TwilioPhone.sendDigits(sid, digits);\n      }\n    );\n\n    return () => {\n      RNTwilioPhone.removeCallKeepListeners();\n    };\n  }\n\n  private static removeTwilioPhoneListeners() {\n    twilioPhoneEmitter.removeAllListeners(EventType.CallInvite);\n    twilioPhoneEmitter.removeAllListeners(EventType.CancelledCallInvite);\n    twilioPhoneEmitter.removeAllListeners(EventType.CallRinging);\n    twilioPhoneEmitter.removeAllListeners(EventType.CallConnected);\n    twilioPhoneEmitter.removeAllListeners(EventType.CallDisconnected);\n    twilioPhoneEmitter.removeAllListeners(EventType.CallDisconnectedError);\n  }\n\n  private static removeCallKeepListeners() {\n    if (Platform.OS === 'ios') {\n      RNCallKeep.removeEventListener('didDisplayIncomingCall');\n      RNCallKeep.removeEventListener('didResetProvider');\n      RNCallKeep.removeEventListener('didActivateAudioSession');\n      RNCallKeep.removeEventListener('didDeactivateAudioSession');\n    }\n\n    RNCallKeep.removeEventListener('didReceiveStartCallAction');\n    RNCallKeep.removeEventListener('answerCall');\n    RNCallKeep.removeEventListener('endCall');\n    RNCallKeep.removeEventListener('didPerformSetMutedCallAction');\n    RNCallKeep.removeEventListener('didToggleHoldCallAction');\n    RNCallKeep.removeEventListener('didPerformDTMFAction');\n  }\n\n  private static async registerTwilioPhone(deviceToken: string) {\n    try {\n      const accessToken = await RNTwilioPhone.fetchAccessToken();\n\n      TwilioPhone.register(accessToken, deviceToken);\n      RNTwilioPhone.deviceToken = deviceToken;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  private static addCall(call: Call) {\n    RNTwilioPhone.calls.push(call);\n  }\n\n  private static removeCall(uuid: string) {\n    let index = -1;\n\n    for (let i = 0; i < RNTwilioPhone.calls.length; i++) {\n      if (RNTwilioPhone.calls[i].uuid === uuid) {\n        index = i;\n        break;\n      }\n    }\n\n    if (index > -1) {\n      RNTwilioPhone.calls.splice(index, 1);\n    }\n  }\n\n  private static getCallUUID(sid: string) {\n    for (const call of RNTwilioPhone.calls) {\n      if (call.sid === sid) {\n        return call.uuid;\n      }\n    }\n\n    return null;\n  }\n\n  private static getCallSid(uuid: string) {\n    for (const call of RNTwilioPhone.calls) {\n      if (call.uuid === uuid) {\n        return call.sid;\n      }\n    }\n\n    return null;\n  }\n}\n\nexport { RNTwilioPhone };\n"]}